// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boxfox_grpc_client.proto

package demo

/*
package名称使用group，框架只在group层面避免冲突
同组内部rpc服务的调用
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MonitorReqNew struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorReqNew) Reset()         { *m = MonitorReqNew{} }
func (m *MonitorReqNew) String() string { return proto.CompactTextString(m) }
func (*MonitorReqNew) ProtoMessage()    {}
func (*MonitorReqNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_boxfox_grpc_client_9c7dcff3d55d76d5, []int{0}
}
func (m *MonitorReqNew) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorReqNew.Unmarshal(m, b)
}
func (m *MonitorReqNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorReqNew.Marshal(b, m, deterministic)
}
func (dst *MonitorReqNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorReqNew.Merge(dst, src)
}
func (m *MonitorReqNew) XXX_Size() int {
	return xxx_messageInfo_MonitorReqNew.Size(m)
}
func (m *MonitorReqNew) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorReqNew.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorReqNew proto.InternalMessageInfo

func (m *MonitorReqNew) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MonitorRespNew struct {
	Errno                int32    `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorRespNew) Reset()         { *m = MonitorRespNew{} }
func (m *MonitorRespNew) String() string { return proto.CompactTextString(m) }
func (*MonitorRespNew) ProtoMessage()    {}
func (*MonitorRespNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_boxfox_grpc_client_9c7dcff3d55d76d5, []int{1}
}
func (m *MonitorRespNew) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorRespNew.Unmarshal(m, b)
}
func (m *MonitorRespNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorRespNew.Marshal(b, m, deterministic)
}
func (dst *MonitorRespNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorRespNew.Merge(dst, src)
}
func (m *MonitorRespNew) XXX_Size() int {
	return xxx_messageInfo_MonitorRespNew.Size(m)
}
func (m *MonitorRespNew) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorRespNew.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorRespNew proto.InternalMessageInfo

func (m *MonitorRespNew) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *MonitorRespNew) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func init() {
	proto.RegisterType((*MonitorReqNew)(nil), "demo.MonitorReqNew")
	proto.RegisterType((*MonitorRespNew)(nil), "demo.MonitorRespNew")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoxfoxGrpcClientServiceClient is the client API for BoxfoxGrpcClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoxfoxGrpcClientServiceClient interface {
	Monitor(ctx context.Context, in *MonitorReqNew, opts ...grpc.CallOption) (*MonitorRespNew, error)
}

type boxfoxGrpcClientServiceClient struct {
	cc *grpc.ClientConn
}

func NewBoxfoxGrpcClientServiceClient(cc *grpc.ClientConn) BoxfoxGrpcClientServiceClient {
	return &boxfoxGrpcClientServiceClient{cc}
}

func (c *boxfoxGrpcClientServiceClient) Monitor(ctx context.Context, in *MonitorReqNew, opts ...grpc.CallOption) (*MonitorRespNew, error) {
	out := new(MonitorRespNew)
	err := c.cc.Invoke(ctx, "/demo.BoxfoxGrpcClientService/Monitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxfoxGrpcClientServiceServer is the server API for BoxfoxGrpcClientService service.
type BoxfoxGrpcClientServiceServer interface {
	Monitor(context.Context, *MonitorReqNew) (*MonitorRespNew, error)
}

func RegisterBoxfoxGrpcClientServiceServer(s *grpc.Server, srv BoxfoxGrpcClientServiceServer) {
	s.RegisterService(&_BoxfoxGrpcClientService_serviceDesc, srv)
}

func _BoxfoxGrpcClientService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxfoxGrpcClientServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.BoxfoxGrpcClientService/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxfoxGrpcClientServiceServer).Monitor(ctx, req.(*MonitorReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

var _BoxfoxGrpcClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.BoxfoxGrpcClientService",
	HandlerType: (*BoxfoxGrpcClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Monitor",
			Handler:    _BoxfoxGrpcClientService_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boxfox_grpc_client.proto",
}

func init() {
	proto.RegisterFile("boxfox_grpc_client.proto", fileDescriptor_boxfox_grpc_client_9c7dcff3d55d76d5)
}

var fileDescriptor_boxfox_grpc_client_9c7dcff3d55d76d5 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xd9, 0xb2, 0x6d, 0x71, 0x40, 0x91, 0x58, 0x74, 0xa9, 0x17, 0xe9, 0xc9, 0x83, 0xcd,
	0x82, 0x7a, 0x16, 0x5c, 0x0f, 0x9e, 0x54, 0x88, 0x3f, 0xa0, 0xec, 0xa6, 0x63, 0x0c, 0x34, 0x99,
	0x38, 0x8d, 0xeb, 0xf6, 0xaf, 0x7b, 0x92, 0x4d, 0x8b, 0xa0, 0xbd, 0xe5, 0x3d, 0x3e, 0x5e, 0xe6,
	0x83, 0xa2, 0xa1, 0xee, 0x8d, 0xba, 0x85, 0xe1, 0xa0, 0x17, 0x7a, 0x65, 0xd1, 0x47, 0x19, 0x98,
	0x22, 0x89, 0x7c, 0x89, 0x8e, 0xa6, 0xf7, 0xc6, 0xc6, 0xf7, 0xcf, 0x46, 0x6a, 0x72, 0x25, 0xfa,
	0x96, 0x36, 0x81, 0xa9, 0xdb, 0x94, 0x09, 0xd1, 0x73, 0x83, 0x7e, 0xde, 0xd6, 0x2b, 0xbb, 0xac,
	0x23, 0x96, 0x7b, 0x8f, 0xed, 0xd0, 0xec, 0x0a, 0x0e, 0x9f, 0xc8, 0xdb, 0x48, 0xac, 0xf0, 0xe3,
	0x19, 0xbf, 0xc4, 0x39, 0xe4, 0xbe, 0x76, 0x58, 0x64, 0x17, 0xd9, 0xe5, 0x41, 0x35, 0xfe, 0xae,
	0x72, 0x1e, 0x1c, 0x67, 0x2a, 0x95, 0xb3, 0x3b, 0x38, 0xfa, 0xa5, 0xd7, 0xa1, 0xc7, 0x27, 0x30,
	0x44, 0x66, 0x4f, 0x89, 0x1f, 0xaa, 0x6d, 0x10, 0xa7, 0x30, 0x42, 0x66, 0xb7, 0x36, 0xc5, 0xa0,
	0x9f, 0x51, 0xbb, 0x74, 0xfd, 0x02, 0x67, 0x55, 0x52, 0x7a, 0xe4, 0xa0, 0x1f, 0x92, 0xd0, 0x2b,
	0x72, 0x6b, 0x35, 0x8a, 0x5b, 0x18, 0xef, 0xa6, 0xc5, 0x89, 0xec, 0xed, 0xe4, 0x9f, 0xbb, 0xa6,
	0x93, 0x7f, 0x65, 0xfa, 0xbe, 0x19, 0x25, 0x8b, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46,
	0x11, 0x10, 0x4a, 0x2a, 0x01, 0x00, 0x00,
}
